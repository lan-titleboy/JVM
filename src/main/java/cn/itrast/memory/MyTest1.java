package cn.itrast.memory;

/**
 *  JVM内存空间划分
 * @author YJ Lan
 * @create 2020-02-07-11:01
 */
/*
    虚拟机栈：                        线程独有 ，数据叫：Stack Frame 栈帧
    程序计数器PC（Program Counter）：  线程独有 ，描述程序执行位置以及执行完一行字节码以后，下一节字节码的位置
    本地方法栈：                      native方法--主要用于执行本地方法
    堆（Heap）：                      JVM管理的最大一块内存空间，存储对象实例。与堆相关的重要概念-垃圾回收器，
                                     现代几乎所有垃圾收集器采用：分代回收算法
                                     新生代，老年代。Eden空间，From Survivor空间与To Survivor空间。

    方法区（Method Area）：           存储元信息，永久带（Permanent Generation）
                                     从JDK1.8开始，已经彻底废弃永久带，使用原空间（meta space）

    运行时常量池：                     方法区一部分
    直接内存（Direct Menery）：        对外内存，非JVM直接管理，操作系统管理
 */

/*
    栈/虚拟机栈：

    Stack Frame 栈帧
    在每个方法执行的时候生成的与其相关的栈帧   作为方法出人口
    包含： 操作数栈、局部变量表、方法返回地址，引用类型等等信息
 */
/*
    堆：
    堆内对象本身有两种数据：
    1.实例数据
    2.元数据（Class信息）--- 在方法区保存

    栈对对象的引用指向有两种方式
    1.句柄形式（两个指针）：  指针1---指向实例数据位置   指针2---指向方法区元数据位置
    2.指针形式（一个指针）：  包含实例数据              指针 ---指向方法区元数据位置
 */
public class MyTest1 {
}
